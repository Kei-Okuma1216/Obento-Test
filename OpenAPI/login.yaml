openapi: 3.0.3
info:
  title: お弁当注文システム API
  description: お弁当屋にお昼のお弁当を注文するアプリ
  version: 1.0.0
servers:
  - url: https://localhost:8000/
    description: Development server
  - url: https://www.sample.com
    description: Production server
paths:
  /:
    get:
      summary: アクセスポイント画面
      description: |
        ### 有効期限内のtokenの有無により
        - 存在する場合 
          - /users/me/place-order へ遷移します。
        - 存在しない場合 
          - /regist へ遷移します。
      responses:
        '200':
          description: アクセスポイントにアクセス
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                      <head>
                          <title>お弁当注文システム</title>
                          <script>|
                              document.addEventListener("DOMContentLoaded", function() {
                                  // Cookieからトークンを取得
                                  let token = document.cookie
                                      .split('; ')
                                      .find(row => row.startsWith('token='))
                                      ?.split('=')[1];
                                  
                                  // トークンの有効期限を確認する（例: tokenの中に有効期限情報がある前提）
                                  if (token) {
                                      // トークンが有効の場合
                                      window.location.href = "/users/me/place-order";
                                  } else {
                                      // トークンが無効または存在しない場合
                                      window.location.href = "/regist";
                                  }
                              });
                          </script>
                      </head>
                      <body>
                          <h1>読み込み中...</h1>
                      </body>
                  </html>
  /regist:
    get:
      summary: ユーザー登録画面
      responses:
        '200':
          description: ログイン画面表示
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                      <head>
                          <title>ユーザー登録</title>
                      </head>
                      <body>
                          <h1>こんにちは！</h1>
                          <form action="/register" method="post">
                              <label for="username">ID:</label><br>
                              <input type="text" id="username" name="username"><br>
                              <label for="password">パスワード:</label><br>
                              <input type="password" id="password" name="password"><br>
                              <input type="submit" value="OK">
                          </form>
                      </body>
                  </html>
  /register:
    post:
      summary: ユーザー登録および更新処理
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:  # formdataを正しく指定
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: ユーザー名
                password:
                  type: string
                  format: password
                  description: パスワード
              required:
                - username
                - password
      responses:
        '200':
          description: 登録成功
          headers:
            Location:
              description: 2秒後にリダイレクト実行
              schema:
                type: string
                example: "/registed"
        '400':
          description: 登録エラー
          headers:
            Location:
              description: リダイレクト先
              schema:
                type: string
                example: "/regist-error"
  /registered:
    get:
      summary: ユーザー登録および更新完了画面
      responses:
        '200':
          description: 登録完了画面表示（2秒後にリダイレクト）
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                      <head>
                          <title>登録完了</title>
                          <meta http-equiv="refresh" content="2;url=/users/me">
                      </head>
                      <body>
                          <h1>登録完了しました！</h1>
                          <p>2秒後に自動的に <a href="/users/me">ユーザーページ</a> にリダイレクトします。</p>
                      </body>
                  </html>
  /regist-error:
    get:
      summary: 登録失敗画面
      responses:
        '200':
          description: 登録失敗画面
          content: 
            text/html: 
              schema: 
                type: string 
                example: register-error.html
components:
  schemas:
    AuthorizationStatus:
      type: string
      enum:
        - user
        - shop
        - admin
  responses:
    '200':
      description: OK
    '400':
      description: Bad Request
    '401':
      description: Unauthorized
    '403':
      description: Forbidden
    '404':
      description: Not Found
    '500':
      description: Internal Server Error
    '503':
      description: Service Unavailable
