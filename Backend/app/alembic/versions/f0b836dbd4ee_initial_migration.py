"""Initial migration

Revision ID: f0b836dbd4ee
Revises: 
Create Date: 2025-04-26 15:00:21.302109

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f0b836dbd4ee'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 古いテーブルを削除する
    op.execute('DROP TABLE IF EXISTS "Orders" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Users" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Menus" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Companies" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Posts" CASCADE')

    # 1. Companies テーブル
    op.create_table(
        'Companies',
        sa.Column('company_id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String(255), nullable=False),
        sa.Column('tel', sa.String(255)),
        sa.Column('shop_name', sa.String(255)),
        sa.Column('created_at', postgresql.TIMESTAMP()),
        sa.Column('disabled', sa.Boolean()),
        schema='public'
    )

    # 2. Users テーブル
    op.create_table(
        'Users',
        sa.Column('user_id', sa.Integer, primary_key=True),
        sa.Column('username', sa.String(255)),
        sa.Column('password', sa.String(255)),
        sa.Column('name', sa.String(255)),
        sa.Column('token', sa.String(255)),
        sa.Column('exp', sa.String(255)),
        sa.Column('company_id', sa.Integer),
        sa.Column('shop_name', sa.String(255)),
        sa.Column('menu_id', sa.Integer),
        sa.Column('permission', sa.Integer),
        sa.Column('is_modified', sa.Boolean()),
        sa.Column('updated_at', sa.String(255)),
        sa.ForeignKeyConstraint(['company_id'], ['public.Companies.company_id'], name='Users_company_id_fkey'),
        schema='public'
    )

    # 3. Orders テーブル
    op.create_table(
        'Orders',
        sa.Column('order_id', sa.Integer, primary_key=True),
        sa.Column('company_id', sa.Integer),
        sa.Column('username', sa.String(255)),
        sa.Column('shop_name', sa.String(255)),
        sa.Column('menu_id', sa.Integer),
        sa.Column('amount', sa.Integer),
        sa.Column('created_at', postgresql.TIMESTAMP()),
        sa.Column('updated_at', postgresql.TIMESTAMP()),
        sa.Column('canceled', sa.Integer),
        schema='public'
    )

    # 4. Menus テーブル
    op.create_table(
        'Menus',
        sa.Column('menu_id', sa.Integer, primary_key=True),
        sa.Column('shop_name', sa.String(255)),
        sa.Column('name', sa.String(255), nullable=False),
        sa.Column('price', sa.Integer, nullable=False),
        sa.Column('description', sa.Text),
        sa.Column('picture_path', sa.String(255)),
        sa.Column('disabled', sa.Boolean()),
        sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()')),
        schema='public'
    )

    # 5. Posts テーブル
    op.create_table(
        'Posts',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('title', sa.String(255), nullable=False),
        sa.Column('content', sa.String, nullable=False),
        schema='public'
    )

    # 既存データ削除
    op.execute('DELETE FROM public."Posts"')

    # サンプルデータ投入
    op.execute(
        "INSERT INTO public.\"Posts\" (id, title, content) VALUES (1, 'テストタイトル', 'これはサンプル記事です。')"
    )
    op.execute(
        "INSERT INTO public.\"Posts\" (id, title, content) VALUES (2, '別のタイトル', '別のサンプル記事です。')"
    )

    # 重複対応の再挿入
    op.execute('''
        INSERT INTO public."Posts" (id, title, content)
        VALUES (1, 'テストタイトル', 'これはサンプル記事です。')
        ON CONFLICT (id) DO UPDATE SET title = EXCLUDED.title, content = EXCLUDED.content
    ''')

    # op.alter_column('Orders', 'canceled', new_column_name='checked')
    op.alter_column('Orders', 'canceled', new_column_name='checked', schema='public')


# Postsテーブルのない状態前戻す

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
 
    # 古いテーブルを削除する
    op.execute('DROP TABLE IF EXISTS "Orders" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Users" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Menus" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Companies" CASCADE')
    op.execute('DROP TABLE IF EXISTS "Posts" CASCADE')
 
    op.create_table('Companies',
    sa.Column('company_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tel', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('shop_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('company_id', name='Companies_pkey')
    )
    op.create_index('ix_Companies_company_id', 'Companies', ['company_id'], unique=False)
    op.create_table('Users',
    sa.Column('user_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('exp', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('shop_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('menu_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_modified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('updated_at', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Companies.company_id'], name='Users_company_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='Users_pkey')
    )
    op.create_index('ix_Users_username', 'Users', ['username'], unique=True)
    op.create_index('ix_Users_user_id', 'Users', ['user_id'], unique=False)
    op.create_table('Orders',
    sa.Column('order_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('shop_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('menu_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('canceled', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('order_id', name='Orders_pkey')
    )

    op.create_table('Menus',
    sa.Column('menu_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('shop_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('picture_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('menu_id', name='Menus_pkey')
    )
    
    
    # ### end Alembic commands ###
